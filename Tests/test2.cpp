#include "../Manager/EnigmaManager.hpp"

// PROGRAM: A program that initializes the enir1 register to 0 and loops until it becomes 1,000,000[A program for checking execution time]
//  010010 0000000000000000000000000000000000000000000000000000000 100 ;load enir1 0
//  001110 01 00000000000000000000000000000000011110100001001000000 000;mov enia 1000000
//  000000 0000000000000000000000000000000000000000000000000000000 000; nop
//  000101 0000000000000000000000000000000000000000000000000000000  100; inc enir1
//  011000 0000000000000000000000000000000000000000000000000000 000 100;cmp enia enir1
//  011111 00000000000000000000000000000000000000000000000000000000000; jne
//  000000 00000000000000000000000000000000000000000000000000000010000; address to jump to[16]
//  101100 0000000000000000000000000000000000000000000000000000000 100 ; save enir1
//  100000 0000000000000000000000000000000000000000000000001000000000 ; the address to save to[ 8 bytes: address 512]
//  101101 0000000000000000000000000000000000000000000000000000000000 ; halt

int main()
{
    // std::vector<std::uint64_t> instructions = {
    // 0b0100100000000000000000000000000000000000000000000000000000000100,
    // 0b0011100100000000000000000000000000000000011110100001001000000000,
    // 0b0000000000000000000000000000000000000000000000000000000000000000,
    // 0b0001010000000000000000000000000000000000000000000000000000000100,
    // 0b0110000000000000000000000000000000000000000000000000000000000100,
    // 0b0111110000000000000000000000000000000000000000000000000000000000,
    // 0b0000000000000000000000000000000000000000000000000000000000010000,
    // 0b1011000000000000000000000000000000000000000000000000000000000100,
    // 0b1000000000000000000000000000000000000000000000000000001000000000,
    // 0b1011010000000000000000000000000000000000000000000000000000000000
    // };
    // Manager::load_instructions(instructions);
    // Manager::start_execution();
    // std::cout << CPU::data_memory.mem_read64(0b1000000000) << std::endl;
    //this took, on average 6 miliseconds
    // now for 1 billion loops
    std::vector<std::uint64_t> instructions = {
    0b0100100000000000000000000000000000000000000000000000000000000100,
    0b0011100100000000000000000000000111011100110101100101000000000000,
    0b0000000000000000000000000000000000000000000000000000000000000000,
    0b0001010000000000000000000000000000000000000000000000000000000100,
    0b0110000000000000000000000000000000000000000000000000000000000100,
    0b0111110000000000000000000000000000000000000000000000000000000000,
    0b0000000000000000000000000000000000000000000000000000000000010000,
    0b1011000000000000000000000000000000000000000000000000000000000100,
    0b1000000000000000000000000000000000000000000000000000001000000000,
    0b1011010000000000000000000000000000000000000000000000000000000000
    };
    Manager::load_instructions(instructions);
    Manager::start_execution();
    std::cout << CPU::data_memory.mem_read64(0b1000000000) << std::endl;
    //this also takes 6 milliseconds on average
}