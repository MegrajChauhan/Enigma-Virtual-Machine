#include "../Manager/EnigmaManager.hpp"

// PROGRAM: A program that asks user for their name and displays a greeting
// 010011 00 00000000000000000000000000000000000000000000000000000 000 ; lea
// 000100 00 00000000000000000000000000000000000000000000000100001 110 ; this address
// 001110 00 00000000000000000000000000000000000000000000000000 001 000;mov enib, enia
// 001110 01 00000000000000000000000000000000000000000000000010000 000 ; mov enia 16
// 001110 01 00000000000000000000000000000000000000000000000010000 010 ;mov enic, 16
// 101110 00 00000000000000000000000000000000000000000000000000000 000 ;syscall
// 010011 00 00000000000000000000000000000000000000000000000000000 000 ; lea
// 000100 00 00000000000000000000000000000000000000000000000100101 101 ; this address
// 001110 00 00000000000000000000000000000000000000000000000000 001 000;mov enib, enia
// 001110 01 00000000000000000000000000000000000000000000000001101 000 ; mov enia 13
// 001110 01 00000000000000000000000000000000000000000000000000101 010 ;mov enic, 5
// 101110 00 00000000000000000000000000000000000000000000000000000 000 ;syscall

// 010011 00 00000000000000000000000000000000000000000000000000000 000 ; lea
// 000100 00 00000000000000000000000000000000000000000000000100011 111 ; this address
// 001110 00 00000000000000000000000000000000000000000000000000 001 000;mov enib, enia
// 001110 01 00000000000000000000000000000000000000000000000010000 000 ; mov enia 16
// 001110 01 00000000000000000000000000000000000000000000000010011 010 ;mov enic, 19
// 101110 00 00000000000000000000000000000000000000000000000000000 000 ;syscall
// 001110 01 00000000000000000000000000000000000000000000000000000 000 ; mov enia 0
// 0b1011010000000000000000000000000000000000000000000000000000000000 ;halt

// ===========================================================================
// 0b0100110000000000000000000000000000000000000000000000000000000000
// 0b0001000000000000000000000000000000000000000000000000000100001110

int main()
{
    CPU::data_memory.mem_write8(270, (int)'E');
    CPU::data_memory.mem_write8(271, (int)'n');
    CPU::data_memory.mem_write8(272, (int)'t');
    CPU::data_memory.mem_write8(273, (int)'e');
    CPU::data_memory.mem_write8(274, (int)'r');
    CPU::data_memory.mem_write8(275, (int)' ');
    CPU::data_memory.mem_write8(276, (int)'Y');
    CPU::data_memory.mem_write8(277, (int)'o');
    CPU::data_memory.mem_write8(278, (int)'u');
    CPU::data_memory.mem_write8(279, (int)'r');
    CPU::data_memory.mem_write8(280, (int)' ');
    CPU::data_memory.mem_write8(281, (int)'N');
    CPU::data_memory.mem_write8(282, (int)'a');
    CPU::data_memory.mem_write8(283, (int)'m');
    CPU::data_memory.mem_write8(284, (int)'e');
    CPU::data_memory.mem_write8(285, (int)':');
    CPU::data_memory.mem_write8(286, (int)'\n');
    CPU::data_memory.mem_write8(287, (int)'Y');
    CPU::data_memory.mem_write8(288, (int)'o');
    CPU::data_memory.mem_write8(289, (int)'u');
    CPU::data_memory.mem_write8(290, (int)'r');
    CPU::data_memory.mem_write8(291, (int)' ');
    CPU::data_memory.mem_write8(292, (int)'n');
    CPU::data_memory.mem_write8(293, (int)'a');
    CPU::data_memory.mem_write8(294, (int)'m');
    CPU::data_memory.mem_write8(295, (int)'e');
    CPU::data_memory.mem_write8(296, (int)' ');
    CPU::data_memory.mem_write8(297, (int)'i');
    CPU::data_memory.mem_write8(298, (int)'s');
    CPU::data_memory.mem_write8(299, (int)':');
    CPU::data_memory.mem_write8(300, (int)' ');
    CPU::data_memory.mem_write8(306, (int)'\n');
    std::vector<qword> instructions = {
        0b0100110000000000000000000000000000000000000000000000000000000000,
        0b0001000000000000000000000000000000000000000000000000000100001110,
        0b0011100000000000000000000000000000000000000000000000000000001000,
        0b0011100100000000000000000000000000000000000000000000000010000000,
        0b0011100100000000000000000000000000000000000000000000000010000010,
        0b1011100000000000000000000000000000000000000000000000000000000000,
        0b0100110000000000000000000000000000000000000000000000000000000000,
        0b0001000000000000000000000000000000000000000000000000000100101101,
        0b0011100000000000000000000000000000000000000000000000000000001000,
        0b0011100100000000000000000000000000000000000000000000000001101000,
        0b0011100100000000000000000000000000000000000000000000000000101010,
        0b1011100000000000000000000000000000000000000000000000000000000000,
        0b0100110000000000000000000000000000000000000000000000000000000000,
        0b0001000000000000000000000000000000000000000000000000000100011111,
        0b0011100000000000000000000000000000000000000000000000000000001000,
        0b0011100100000000000000000000000000000000000000000000000010000000,
        0b0011100100000000000000000000000000000000000000000000000011010010,
        0b1011100000000000000000000000000000000000000000000000000000000000,
        0b0011100100000000000000000000000000000000000000000000000000000000,
        0b1011010000000000000000000000000000000000000000000000000000000000};
    Manager::load_instructions(instructions);
    Manager::start_execution();
}